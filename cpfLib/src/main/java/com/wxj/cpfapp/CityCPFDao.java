package com.wxj.cpfapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CITY_CPF".
*/
public class CityCPFDao extends AbstractDao<CityCPF, Long> {

    public static final String TABLENAME = "CITY_CPF";

    /**
     * Properties of entity CityCPF.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property City = new Property(1, String.class, "city", false, "CITY");
        public final static Property Cname = new Property(2, String.class, "cname", false, "CNAME");
        public final static Property Month = new Property(3, String.class, "month", false, "MONTH");
        public final static Property Pname = new Property(4, String.class, "pname", false, "PNAME");
        public final static Property Prov = new Property(5, String.class, "prov", false, "PROV");
        public final static Property Region = new Property(6, String.class, "region", false, "REGION");
        public final static Property Rule = new Property(7, String.class, "rule", false, "RULE");
        public final static Property Subdl = new Property(8, String.class, "subdl", false, "SUBDL");
        public final static Property Timestamp = new Property(9, String.class, "timestamp", false, "TIMESTAMP");
    };


    public CityCPFDao(DaoConfig config) {
        super(config);
    }
    
    public CityCPFDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY_CPF\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CITY\" TEXT," + // 1: city
                "\"CNAME\" TEXT," + // 2: cname
                "\"MONTH\" TEXT," + // 3: month
                "\"PNAME\" TEXT," + // 4: pname
                "\"PROV\" TEXT," + // 5: prov
                "\"REGION\" TEXT," + // 6: region
                "\"RULE\" TEXT," + // 7: rule
                "\"SUBDL\" TEXT," + // 8: subdl
                "\"TIMESTAMP\" TEXT);"); // 9: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY_CPF\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CityCPF entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String cname = entity.getCname();
        if (cname != null) {
            stmt.bindString(3, cname);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(4, month);
        }
 
        String pname = entity.getPname();
        if (pname != null) {
            stmt.bindString(5, pname);
        }
 
        String prov = entity.getProv();
        if (prov != null) {
            stmt.bindString(6, prov);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(7, region);
        }
 
        String rule = entity.getRule();
        if (rule != null) {
            stmt.bindString(8, rule);
        }
 
        String subdl = entity.getSubdl();
        if (subdl != null) {
            stmt.bindString(9, subdl);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(10, timestamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CityCPF readEntity(Cursor cursor, int offset) {
        CityCPF entity = new CityCPF( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // city
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // month
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // prov
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // region
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rule
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // subdl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CityCPF entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCity(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMonth(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProv(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRegion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRule(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubdl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTimestamp(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CityCPF entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CityCPF entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
